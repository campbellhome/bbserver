// Copyright (c) Matt Campbell
// MIT license (see License.txt)

// AUTOGENERATED FILE - DO NOT EDIT

// clang-format off

#pragma once

#include "bb.h" // pull in stdint.h warning suppression for VS 2019 16.4 when compiling .c files
#include "parson/parson.h"

#if defined(__cplusplus)
extern "C" {
#endif

struct sb_s;
struct sbs_s;
struct sdictEntry_s;
struct sdict_s;
struct tag_sdicts;
struct uuid_node_s;
struct id_name_s;
struct id_names_s;
struct bbstats_bucket_s;
struct bbstats_buckets_s;
struct bbstats_fileHashEntry;
struct bbstats_fileHashChain;
struct bbstats_fileHashTable;
struct bbstats_process_file_data_s;
struct bbstats_data_s;
struct vfilter_token_s;
struct vfilter_tokens_s;
struct vfilter_error_s;
struct vfilter_result_s;
struct vfilter_results_s;
struct named_vfilters_s;
struct vfilter_s;

typedef struct sb_s sb_t;
typedef struct sbs_s sbs_t;
typedef struct sdictEntry_s sdictEntry_t;
typedef struct sdict_s sdict_t;
typedef struct tag_sdicts sdicts;
typedef struct uuid_node_s uuid_node_t;
typedef struct id_name_s id_name_t;
typedef struct id_names_s id_names_t;
typedef struct bbstats_bucket_s bbstats_bucket_t;
typedef struct bbstats_buckets_s bbstats_buckets_t;
typedef struct bbstats_fileHashEntry bbstats_fileHashEntry;
typedef struct bbstats_fileHashChain bbstats_fileHashChain;
typedef struct bbstats_fileHashTable bbstats_fileHashTable;
typedef struct bbstats_process_file_data_s bbstats_process_file_data_t;
typedef struct bbstats_data_s bbstats_data_t;
typedef struct vfilter_token_s vfilter_token_t;
typedef struct vfilter_tokens_s vfilter_tokens_t;
typedef struct vfilter_error_s vfilter_error_t;
typedef struct vfilter_result_s vfilter_result_t;
typedef struct vfilter_results_s vfilter_results_t;
typedef struct named_vfilters_s named_vfilters_t;
typedef struct vfilter_s vfilter_t;

typedef enum vfilter_type_e vfilter_type_e;
typedef enum vfilter_token_type_e vfilter_token_type_e;

sb_t json_deserialize_sb_t(JSON_Value *src);
sbs_t json_deserialize_sbs_t(JSON_Value *src);
sdictEntry_t json_deserialize_sdictEntry_t(JSON_Value *src);
sdict_t json_deserialize_sdict_t(JSON_Value *src);
sdicts json_deserialize_sdicts(JSON_Value *src);
uuid_node_t json_deserialize_uuid_node_t(JSON_Value *src);

JSON_Value *json_serialize_sb_t(const sb_t *src);
JSON_Value *json_serialize_sbs_t(const sbs_t *src);
JSON_Value *json_serialize_sdictEntry_t(const sdictEntry_t *src);
JSON_Value *json_serialize_sdict_t(const sdict_t *src);
JSON_Value *json_serialize_sdicts(const sdicts *src);
JSON_Value *json_serialize_uuid_node_t(const uuid_node_t *src);


vfilter_type_e json_deserialize_vfilter_type_e(JSON_Value *src);
vfilter_token_type_e json_deserialize_vfilter_token_type_e(JSON_Value *src);

JSON_Value *json_serialize_vfilter_type_e(const vfilter_type_e src);
JSON_Value *json_serialize_vfilter_token_type_e(const vfilter_token_type_e src);


vfilter_type_e vfilter_type_e_from_string(const char *src);
vfilter_token_type_e vfilter_token_type_e_from_string(const char *src);

const char *string_from_vfilter_type_e(const vfilter_type_e src);
const char *string_from_vfilter_token_type_e(const vfilter_token_type_e src);

#if defined(__cplusplus)
} // extern "C"
#endif
